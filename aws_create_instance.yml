---
- name: Provision instance in AWS
  hosts: localhost
  gather_facts: false
# vars: defaults in group_vars/all/aws_vars.yml


  tasks:
    - name: Conditionally provision Windows ec2 instance in AWS
      when: image_name == "windows2019"
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        state: started
        key_name: "{{ ssh_key_name }}"
        security_group: "{{ security_group_id }}"
        instance_type: "{{ instance_size }}"
        tags: 
          Env: "{{ env_tag }}"
          App: "{{ app_tag }}"
          Name: "{{ name_tag }}"
        image_id: "{{ ami_id[image_name] }}"
        wait: true
        vpc_subnet_id: "{{ subnet_id }}"
        count: "{{ instance_count }}"
        network:
          assign_public_ip: yes
        user_data: | 
          <powershell>
          $admin = [adsi]("WinNT://./administrator, user")
          $admin.PSBase.Invoke("SetPassword", "myTempPassword123!")
          Invoke-Expression ((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))
          </powershell>
      register: ec2_instance_facts_win

    - name: Conditionally provision RHEL ec2 instance in AWS
      when: image_name is match("rhel*")
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        state: started
        key_name: "{{ ssh_key_name }}"
        security_group: "{{ security_group_id }}"
        instance_type: "{{ instance_size }}"
        tags: 
          Env: "{{ env_tag }}"
          App: "{{ app_tag }}"
          Name: "{{ name_tag }}"
        image_id: "{{ ami_id[image_name] }}"
        wait: true
        vpc_subnet_id: "{{ subnet_id }}"
        count: "{{ instance_count }}"
        network:
          assign_public_ip: yes
      register: ec2_instance_facts_rhel      

    - name: initialize target_hosts as an empty list/array
      set_fact:
        target_hosts: []

    - name: load Windows instances into target_hosts list (used in future plays for config)
      when: image_name == "windows2019" 
      set_stats:
        data: 
          target_hosts: "{{ target_hosts + [ item.public_dns_name ] }}"
      loop: "{{ ec2_instance_facts_win.instances }}"

    - name: load RHEL instances into target_hosts list (used in future plays for config)
      when: image_name is match("rhel*")
      set_stats:
        data: 
          target_hosts: "{{ target_hosts + [ item.public_dns_name ] }}"
      loop: "{{ ec2_instance_facts_rhel.instances }}"

    - name: give instance time to initialize before configuration
      ansible.builtin.wait_for: 
        timeout: 150



